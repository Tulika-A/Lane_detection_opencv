import cv2
import numpy as np
import matplotlib.pyplot as plt


def canny(image):
    ##converting to grayscale to get a 2D image
    gray = cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)

    ##using a gaussian blur to reduce noise. Optional since the Canny edge detector does that anyway
    blur = cv2.GaussianBlur(gray,(5,5),0)

    canny_detected = cv2.Canny(blur, 50, 150)
    return canny_detected

def region_of_interest(image):
    height = image.shape[0]
    polygon_coordinates = np.array([[(200,height),(1100,height),(550,250)]])
    
    ##creates an image with same dimensions as the passed image as argument
    ##except all the pixels are 0. 
    mask = np.zeros_like(image)
    
    ##fills the area determined by polygon_coordinates with pixel value 255
    cv2.fillPoly(mask,polygon_coordinates, 255)

    ##doing bitwise AND operation to extract the region of interest
    masked_image = cv2.bitwise_and(image, mask)
    
    return masked_image
    

## Read in in the image
image = cv2.imread('test_image.jpg')

##Making a deep copy of the image through numpy. A simple/shallow copy would make changes to the original image as well
lane_image = np.copy(image)

##Using canny edge detector
canny_detected = canny(lane_image)

##extracting region of interest
roi_image = region_of_interest(canny_detected)


##Display image
cv2.imshow('After Canny Edge Detection',canny_detected)
cv2.imshow('Region of Interest',roi_image)

cv2.waitKey(0)
